/*             TODO 
               ----

OBJECTIVE: Write tests and code to prove to yourself that you understand the concepts 

attributes / variables
	number
	string
	boolean
	array
	dictionary / objects
	undefined

sample if / else

functions
	parameters
	returns

arrays
	add to the front
	add to the end
	update values

loops 
	for
	for/in
	while
	do while
	forEach (with array and function)

Objects / Dictionaries
	declare object
	lookup key to retrieve value

---------------------------------------*/


/* MANIUPLATING ARRAYS W/
   FUNCTIONS AND METHODS.
   ---------------------- */

// Declare variables outside of functions, 
// making them have global scope and usage.
var varMixed;
var realMixed;
var finalMixed;

function variableArray(){
	// String datatype
	var _string = "String";
	// Number datatype
	var _zero   = 0;
	// null datatype
	var _null   = null;
	// Boolean datatype
	var _true   = true;
	// undefined dataype
	var _undef  = undefined;

	// Adding newly defined variables into an array.
	varMixed = new Array(_zero, _null, _true);

	// Adding an element to the front of the array.
	varMixed.unshift(_string);

	// Adding an element to the back of the array.
	varMixed.push(_undef);

	return varMixed;

}

function mixedArray(){
	// Arrays can also have any data type within them.
	// This array will be identical to 'varMixed' array.
	realMixed = new Array("String", 0, null, true, undefined);

	return realMixed;
}

// Takes in the returned parameters from the above two functions.
function compareArrays(){
	// // Calling the two previously created arrays.
	variableArray();
	mixedArray();

	// if/else loop that will demonstrate that
	// these elements in both arrays are identical.
	if (varMixed[2] == realMixed[2]){
		console.log("These elements are identical!");
		return true;
	} else {
		console.log("These elements are different!");
		return false;
	}
}

function combineArrays(){
	// Calling the two previously created arrays.
	variableArray();
	mixedArray();

	// Using the .concat() method to combine these arrays.
	finalMixed = varMixed.concat(realMixed);

	// Returns the final combined array.
	return finalMixed;
}

// Calling the methods to display.
console.log(compareArrays()); 
console.log(combineArrays());


// TODO: https://pietschsoft.com/post/2015/09/05/javascript-basics-how-to-create-a-dictionary-with-keyvalue-pairs

/* DICTIONARY / KEY RETRIEVE 
   ------------------------- */

var dict = {};
var addPair = function (myKey, myValue) {
    dict[myKey] = myValue;
};
var giveValue = function (myKey) {
    return dict[myKey];
};


/* USER INPUT
   ---------- */

function userInput(a, b){
	var num1 = window.prompt("Enter your first number: ");
	alert("Your first number is: " + num1);
	var num2 = window.prompt("Enter your second number: ");
	alert("Your second number is: " + num2);
}


/* IF / ELSE LOOP 
   -------------- */

function ifElse {

}

/* FUNCTIONS (PARAMETERS + RETURNS) 
   -------------------------------- */

// Regular function, called explicitly by name.
function multiply(a, b) {
    var result = a * b;
    console.log(result);
    return result;
}

var product = multiply(3, 4);

// Anonymous function stored in variable.
// Invoked by calling the variable as a function.
var quotient = function() {
    var a; var b;
    var result = a / b;
    console.log(a, " divided by ", b, " equals: ", result);
}

quotient();

// Immediately invoked function expression.
// Runs as soon as browser finds it.
(function () {
    var a; var b;
    var result = a / b;
    console.log(a, " divided by ", b, " equals: ", result);
}())



/* ARRAYS 
   ------ */

function penArray {
	// Shorthand
	pens = new Array("red", "blue", "green", "orange");

	// Modifying and calling elements in the array:
	pens[3] = "purple";
	var fourthPen = pens[3];

	// Arrays can have any data type within them.
	mixedBag = new Array("String", 0, null, True, undefined);

	console.log(pens);
	console.log(mixedBag);

	var result = pens.indexOf("orange", 0);
	console.log("The index position is: ", result);
	console.log("The element is:", pens[result]);
}


/* LOOPS
   ----- */


/* OBJECTS / DICTIONARIES
   ---------------------- */

/* VARIABLE SCOPE
   -------------- */

function logScope() {
    var localVar = 2;

    if (localVar) {
        let localVar = "I'm different!"
        console.log("nested localVar: ", localVar);
    }

    console.log("logScope localVar: ", localVar);
}

/* OTHER CODE 
   ---------- */